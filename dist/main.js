(()=>{"use strict";console.log("mazda".split("").reverse().join(""))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoibUJBSUFBLFFBQVFDLElBQWtCLFFBSGJDLE1BQU0sSUFBSUMsVUFBVUMsS0FBSyxJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiByZXZlcnNlU3RyaW5nKHN0cikge1xuICByZXR1cm4gc3RyLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpO1xufVxuXG5jb25zb2xlLmxvZyhyZXZlcnNlU3RyaW5nKFwibWF6ZGFcIikpO1xuXG4vL1NISVAgRkFDVE9SWVxuXG5mdW5jdGlvbiBzaGlwKGxlbmd0aCkge1xuICBsZXQgaGl0cyA9IDA7XG4gIGxldCBpc1N1bmsgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBoaXQoKSB7XG4gICAgaGl0cysrO1xuICAgIGlmIChoaXRzID09PSBsZW5ndGgpIHtcbiAgICAgIGlzU3VuayA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBsZW5ndGgsXG4gICAgZ2V0IGhpdHMoKSB7XG4gICAgICByZXR1cm4gaGl0cztcbiAgICB9LFxuICAgIGdldCBpc1N1bmsoKSB7XG4gICAgICByZXR1cm4gaXNTdW5rO1xuICAgIH0sXG4gICAgaGl0LFxuICB9O1xufVxuXG4vL0dBTUVCT0FSRCBGQUNUT1JZXG5cbmZ1bmN0aW9uIGdhbWVib2FyZCgpIHtcbiAgY29uc3QgYm9hcmQgPSBBcnJheS5mcm9tKEFycmF5KDEwKSwgKCkgPT4gQXJyYXkoMTApLmZpbGwobnVsbCkpO1xuICBjb25zdCBzaGlwcyA9IFtdO1xuXG4gIGZ1bmN0aW9uIHBsYWNlU2hpcChzaGlwLCB4LCB5LCBpc1ZlcnRpY2FsKSB7XG4gICAgaWYgKHggPCAwIHx8IHggPj0gMTAgfHwgeSA8IDAgfHwgeSA+PSAxMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjb29yZGluYXRlc1wiKTtcbiAgICB9XG5cbiAgICBpZiAoaXNWZXJ0aWNhbCkge1xuICAgICAgaWYgKHkgKyBzaGlwLmxlbmd0aCA+IDEwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNoaXAgcGxhY2VtZW50IG91dCBvZiBib3VuZHNcIik7XG4gICAgICB9XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYm9hcmRbeSArIGldW3hdICE9PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2hpcCBwbGFjZW1lbnQgb3ZlcmxhcFwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYm9hcmRbeSArIGldW3hdID0geyBzaGlwOiBzaGlwLCBpc0hpdDogZmFsc2UgfTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHggKyBzaGlwLmxlbmd0aCA+IDEwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNoaXAgcGxhY2VtZW50IG91dCBvZiBib3VuZHNcIik7XG4gICAgICB9XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYm9hcmRbeV1beCArIGldICE9PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2hpcCBwbGFjZW1lbnQgb3ZlcmxhcFwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYm9hcmRbeV1beCArIGldID0geyBzaGlwOiBzaGlwLCBpc0hpdDogZmFsc2UgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzaGlwcy5wdXNoKHNoaXApO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVjZWl2ZUF0dGFjayh4LCB5KSB7XG4gICAgaWYgKHggPCAwIHx8IHggPj0gMTAgfHwgeSA8IDAgfHwgeSA+PSAxMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjb29yZGluYXRlc1wiKTtcbiAgICB9XG5cbiAgICBjb25zdCBzcXVhcmUgPSBib2FyZFt5XVt4XTtcbiAgICBpZiAoc3F1YXJlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNxdWFyZS5pc0hpdCA9IHRydWU7XG4gICAgICBzcXVhcmUuc2hpcC5oaXQoKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFyZUFsbFNoaXBzU3VuaygpIHtcbiAgICByZXR1cm4gc2hpcHMuZXZlcnkoKHNoaXApID0+IHNoaXAuaXNTdW5rKTtcbiAgfVxuXG4gIHJldHVybiB7IGJvYXJkLCBwbGFjZVNoaXAsIHJlY2VpdmVBdHRhY2ssIGFyZUFsbFNoaXBzU3VuayB9O1xufVxuXG5leHBvcnQgeyByZXZlcnNlU3RyaW5nLCBzaGlwLCBnYW1lYm9hcmQgfTtcbiJdLCJuYW1lcyI6WyJjb25zb2xlIiwibG9nIiwic3BsaXQiLCJyZXZlcnNlIiwiam9pbiJdLCJzb3VyY2VSb290IjoiIn0=