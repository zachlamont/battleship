(()=>{"use strict";var t={};function e(t){let e=0,i=!1;return{length:t,get hits(){return e},get isSunk(){return i},hit:function(){e++,e===t&&(i=!0)}}}function i(){const t=Array.from(Array(10),(()=>Array(10).fill().map((()=>({isHit:!1,ship:null}))))),e=[];return{board:t,placeShip:function(i,o,r,n){if(o<0||o>=10||r<0||r>=10)throw new Error("Invalid coordinates");if(n){if(r+i.length>10)throw new Error("Ship placement out of bounds");for(let e=0;e<i.length;e++)if(null!==t[r+e][o].ship)throw new Error("Ship placement overlap");for(let e=0;e<i.length;e++)t[r+e][o]={ship:i,isHit:!1}}else{if(o+i.length>10)throw new Error("Ship placement out of bounds");for(let e=0;e<i.length;e++)if(null!==t[r][o+e].ship)throw new Error("Ship placement overlap");for(let e=0;e<i.length;e++)t[r][o+e]={ship:i,isHit:!1}}e.push(i)},receiveAttack:function(e,i){if(e<0||e>=10||i<0||i>=10)throw new Error("Invalid coordinates");const o=t[i][e];return null!==o.ship&&0==o.isHit?(o.isHit=!0,o.ship.hit(),!0):!(!o||0!=o.isHit||(o.isHit=!0,0))},areAllShipsSunk:function(){return e.every((t=>t.isSunk))}}}t.d=(e,i)=>{for(var o in i)t.o(i,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:i[o]})},t.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),console.log("mazda".split("").reverse().join(""));let o=i(),r=i();function n(t){const i=[5,4,3,3,2];for(let o of i){let i=!1;for(;!i;)try{const r=Math.random()>=.5,n=Math.floor(9*Math.random()),a=Math.floor(9*Math.random());t.placeShip(e(o),n,a,r),i=!0}catch(t){console.error(t)}}}n(o),n(r);const a={attack(t,e,i){t.receiveAttack(e,i)}},s={hasHitShip:!1,lastHit:null,adjacentSquares:[[-1,0],[0,-1],[1,0],[0,1]],attack(t){let e=!1;for(;!e;){let i,o;if(this.hasHitShip){const[t,e]=this.lastHit,[r,n]=this.adjacentSquares.shift();i=t+r,o=e+n}else i=Math.floor(10*Math.random()),o=Math.floor(10*Math.random());const r=t.board[o][i];console.log(r),r&&!r.isHit?(r.ship?(t.receiveAttack(i,o),this.hasHitShip=!0,this.lastHit=[i,o],this.adjacentSquares=[[-1,0],[0,-1],[1,0],[0,1]]):(t.receiveAttack(i,o),this.hasHitShip=!1),e=!0):this.hasHitShip&&0===this.adjacentSquares.length&&(this.hasHitShip=!1,this.adjacentSquares=[[-1,0],[0,-1],[1,0],[0,1]])}}};let l=a;function h(){l=l===a?s:a}const c=document.getElementById("player-board"),d=document.getElementById("computer-board");function p(t,e){e.innerHTML="";for(let i=0;i<t.board.length;i++)for(let o=0;o<t.board[i].length;o++){const n=document.createElement("div");n.classList.add("square"),null===t.board[i][o].ship&&!0===t.board[i][o].isHit&&(console.log("yo"+t.board[i][o].ship),console.log("is hit"+t.board[i][o].isHit),n.classList.add("miss"),n.textContent="miss"),null!==t.board[i][o].ship&&(!0===t.board[i][o].isHit?(n.classList.add("hit"),n.textContent="hit"):(n.classList.add("ship"),n.textContent="ship")),n.addEventListener("click",(()=>{l!==a||t.board[i][o].isHit||(l.attack(r,o,i),p(r,d),h(),u())})),e.appendChild(n)}}function u(){o.areAllShipsSunk()?alert("Computer wins!"):r.areAllShipsSunk()?alert("Player wins!"):l===s&&(console.log(o.board),l.attack(o),p(o,c),h(),u())}p(o,c),p(r,d),u(),document.getElementById("restart-btn").addEventListener("click",(()=>{console.log("clicked"),o=i(),r=i(),n(o),n(r),p(o,c),p(r,d),u()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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R0FBRzJELEdBQUc5RSxRQUNZLElBQTVCTyxFQUFNQSxNQUFNWSxHQUFHMkQsR0FBR2xFLE9BQ3BCVSxFQUFPMEQsVUFBVUMsSUFBSSxPQUNyQjNELEVBQU80RCxZQUFjLFFBRXJCNUQsRUFBTzBELFVBQVVDLElBQUksUUFDckIzRCxFQUFPNEQsWUFBYyxTQUl6QjVELEVBQU82RCxpQkFBaUIsU0FBUyxLQUMzQmQsSUFBa0JiLEdBQVdqRCxFQUFNQSxNQUFNWSxHQUFHMkQsR0FBR2xFLFFBQ2pEeUQsRUFBY1osT0FBT1osRUFBZWlDLEVBQUczRCxHQUN2Q3dELEVBQVk5QixFQUFlNkIsR0FDM0JKLElBQ0FjLElBQ0YsSUFFRlIsRUFBUVMsWUFBWS9ELEVBQ3RCLENBRUosQ0FFQSxTQUFTOEQsSUFDSHhDLEVBQVlyQixrQkFDZCtELE1BQU0sa0JBSUp6QyxFQUFjdEIsa0JBQ2hCK0QsTUFBTSxnQkFJSmpCLElBQWtCWCxJQUNwQm5CLFFBQVFDLElBQUlJLEVBQVlyQyxPQUN4QjhELEVBQWNaLE9BQU9iLEdBQ3JCK0IsRUFBWS9CLEVBQWEyQixHQUN6QkQsSUFDQWMsSUFFSixDQUVBVCxFQUFZL0IsRUFBYTJCLEdBQ3pCSSxFQUFZOUIsRUFBZTZCLEdBQzNCVSxJQWtCbUJaLFNBQVNDLGVBQWUsZUFDaENVLGlCQUFpQixTQUFTLEtBR25DNUMsUUFBUUMsSUFBSSxXQWRaSSxFQUFjdEMsSUFDZHVDLEVBQWdCdkMsSUFDaEJ3QyxFQUFpQkYsR0FDakJFLEVBQWlCRCxHQUVqQjhCLEVBQVkvQixFQUFhMkIsR0FDM0JJLEVBQVk5QixFQUFlNkIsR0FDM0JVLEdBU2UsRyIsInNvdXJjZXMiOlsid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhlIHJlcXVpcmUgc2NvcGVcbnZhciBfX3dlYnBhY2tfcmVxdWlyZV9fID0ge307XG5cbiIsImZ1bmN0aW9uIHJldmVyc2VTdHJpbmcoc3RyKSB7XG4gIHJldHVybiBzdHIuc3BsaXQoXCJcIikucmV2ZXJzZSgpLmpvaW4oXCJcIik7XG59XG5cbmNvbnNvbGUubG9nKHJldmVyc2VTdHJpbmcoXCJtYXpkYVwiKSk7XG5cbi8vU0hJUCBGQUNUT1JZXG5cbmZ1bmN0aW9uIHNoaXAobGVuZ3RoKSB7XG4gIGxldCBfaGl0cyA9IDA7XG4gIGxldCBpc1N1bmsgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBoaXQoKSB7XG4gICAgX2hpdHMrKztcbiAgICBpZiAoX2hpdHMgPT09IGxlbmd0aCkge1xuICAgICAgaXNTdW5rID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGxlbmd0aCxcbiAgICBnZXQgaGl0cygpIHtcbiAgICAgIHJldHVybiBfaGl0cztcbiAgICB9LFxuICAgIGdldCBpc1N1bmsoKSB7XG4gICAgICByZXR1cm4gaXNTdW5rO1xuICAgIH0sXG4gICAgaGl0LFxuICB9O1xufVxuXG4vL0dBTUVCT0FSRCBGQUNUT1JZXG5cbmZ1bmN0aW9uIGdhbWVib2FyZCgpIHtcbiAgY29uc3QgYm9hcmQgPSBBcnJheS5mcm9tKEFycmF5KDEwKSwgKCkgPT5cbiAgICBBcnJheSgxMClcbiAgICAgIC5maWxsKClcbiAgICAgIC5tYXAoKCkgPT4gKHtcbiAgICAgICAgaXNIaXQ6IGZhbHNlLFxuICAgICAgICBzaGlwOiBudWxsLFxuICAgICAgfSkpXG4gICk7XG5cbiAgY29uc3Qgc2hpcHMgPSBbXTtcblxuICBmdW5jdGlvbiBwbGFjZVNoaXAoc2hpcCwgeCwgeSwgaXNWZXJ0aWNhbCkge1xuICAgIGlmICh4IDwgMCB8fCB4ID49IDEwIHx8IHkgPCAwIHx8IHkgPj0gMTApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY29vcmRpbmF0ZXNcIik7XG4gICAgfVxuXG4gICAgaWYgKGlzVmVydGljYWwpIHtcbiAgICAgIGlmICh5ICsgc2hpcC5sZW5ndGggPiAxMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTaGlwIHBsYWNlbWVudCBvdXQgb2YgYm91bmRzXCIpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGJvYXJkW3kgKyBpXVt4XS5zaGlwICE9PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2hpcCBwbGFjZW1lbnQgb3ZlcmxhcFwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYm9hcmRbeSArIGldW3hdID0geyBzaGlwOiBzaGlwLCBpc0hpdDogZmFsc2UgfTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHggKyBzaGlwLmxlbmd0aCA+IDEwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNoaXAgcGxhY2VtZW50IG91dCBvZiBib3VuZHNcIik7XG4gICAgICB9XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYm9hcmRbeV1beCArIGldLnNoaXAgIT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTaGlwIHBsYWNlbWVudCBvdmVybGFwXCIpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcC5sZW5ndGg7IGkrKykge1xuICAgICAgICBib2FyZFt5XVt4ICsgaV0gPSB7IHNoaXA6IHNoaXAsIGlzSGl0OiBmYWxzZSB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHNoaXBzLnB1c2goc2hpcCk7XG4gIH1cblxuICBmdW5jdGlvbiByZWNlaXZlQXR0YWNrKHgsIHkpIHtcbiAgICBpZiAoeCA8IDAgfHwgeCA+PSAxMCB8fCB5IDwgMCB8fCB5ID49IDEwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNvb3JkaW5hdGVzXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IHNxdWFyZSA9IGJvYXJkW3ldW3hdO1xuICAgIGlmIChzcXVhcmUuc2hpcCAhPT0gbnVsbCAmJiBzcXVhcmUuaXNIaXQgPT0gZmFsc2UpIHtcbiAgICAgIHNxdWFyZS5pc0hpdCA9IHRydWU7XG4gICAgICBzcXVhcmUuc2hpcC5oaXQoKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAoc3F1YXJlICYmIHNxdWFyZS5pc0hpdCA9PSBmYWxzZSkge1xuICAgICAgc3F1YXJlLmlzSGl0ID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYXJlQWxsU2hpcHNTdW5rKCkge1xuICAgIHJldHVybiBzaGlwcy5ldmVyeSgoc2hpcCkgPT4gc2hpcC5pc1N1bmspO1xuICB9XG5cbiAgcmV0dXJuIHsgYm9hcmQsIHBsYWNlU2hpcCwgcmVjZWl2ZUF0dGFjaywgYXJlQWxsU2hpcHNTdW5rIH07XG59XG5cbmV4cG9ydCB7IHJldmVyc2VTdHJpbmcsIHNoaXAsIGdhbWVib2FyZCB9O1xuXG4vL01BSU4gR0FNRSBMT09QXG5cbmxldCBwbGF5ZXJCb2FyZCA9IGdhbWVib2FyZCgpO1xubGV0IGNvbXB1dGVyQm9hcmQgPSBnYW1lYm9hcmQoKTtcblxuZnVuY3Rpb24gcGxhY2VSYW5kb21TaGlwcyhib2FyZCkge1xuICBjb25zdCBzaGlwTGVuZ3RocyA9IFs1LCA0LCAzLCAzLCAyXTtcblxuICBmb3IgKGxldCBsZW5ndGggb2Ygc2hpcExlbmd0aHMpIHtcbiAgICBsZXQgc2hpcFBsYWNlZCA9IGZhbHNlO1xuXG4gICAgd2hpbGUgKCFzaGlwUGxhY2VkKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBpc0hvcml6b250YWwgPSBNYXRoLnJhbmRvbSgpID49IDAuNTtcbiAgICAgICAgY29uc3Qgcm93ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogOSk7XG4gICAgICAgIGNvbnN0IGNvbCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDkpO1xuXG4gICAgICAgIGJvYXJkLnBsYWNlU2hpcChzaGlwKGxlbmd0aCksIHJvdywgY29sLCBpc0hvcml6b250YWwpO1xuICAgICAgICBzaGlwUGxhY2VkID0gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5wbGFjZVJhbmRvbVNoaXBzKHBsYXllckJvYXJkKTtcbnBsYWNlUmFuZG9tU2hpcHMoY29tcHV0ZXJCb2FyZCk7XG5cbmNvbnN0IHBsYXllciA9IHtcbiAgYXR0YWNrKGdhbWVib2FyZCwgeCwgeSkge1xuICAgIGdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKHgsIHkpO1xuICB9LFxufTtcblxuY29uc3QgY29tcHV0ZXIgPSB7XG4gIGhhc0hpdFNoaXA6IGZhbHNlLFxuICBsYXN0SGl0OiBudWxsLCAvLyBbeCwgeV0gY29vcmRpbmF0ZXMgb2YgdGhlIGxhc3QgaGl0XG4gIGFkamFjZW50U3F1YXJlczogW1xuICAgIFstMSwgMF0sXG4gICAgWzAsIC0xXSxcbiAgICBbMSwgMF0sXG4gICAgWzAsIDFdLFxuICBdLCAvLyBhZGphY2VudCBzcXVhcmVzIHRvIHRhcmdldFxuXG4gIGF0dGFjayhnYW1lYm9hcmQpIHtcbiAgICBsZXQgYXR0YWNrQ29tcGxldGVkID0gZmFsc2U7XG4gICAgd2hpbGUgKCFhdHRhY2tDb21wbGV0ZWQpIHtcbiAgICAgIGxldCB4LCB5O1xuICAgICAgaWYgKHRoaXMuaGFzSGl0U2hpcCkge1xuICAgICAgICAvLyB0YXJnZXQgYW4gYWRqYWNlbnQgc3F1YXJlIHRvIHRoZSBsYXN0IGhpdFxuICAgICAgICBjb25zdCBbbGFzdEhpdFgsIGxhc3RIaXRZXSA9IHRoaXMubGFzdEhpdDtcbiAgICAgICAgY29uc3QgW29mZnNldFgsIG9mZnNldFldID0gdGhpcy5hZGphY2VudFNxdWFyZXMuc2hpZnQoKTsgLy8gcmVtb3ZlIGFuZCB1c2UgdGhlIGZpcnN0IGFkamFjZW50IHNxdWFyZVxuICAgICAgICB4ID0gbGFzdEhpdFggKyBvZmZzZXRYO1xuICAgICAgICB5ID0gbGFzdEhpdFkgKyBvZmZzZXRZO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gY2hvb3NlIGEgcmFuZG9tIHNxdWFyZVxuICAgICAgICB4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApO1xuICAgICAgICB5ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApO1xuICAgICAgfVxuICAgICAgY29uc3Qgc3F1YXJlID0gZ2FtZWJvYXJkLmJvYXJkW3ldW3hdO1xuICAgICAgY29uc29sZS5sb2coc3F1YXJlKTtcbiAgICAgIGlmIChzcXVhcmUgJiYgIXNxdWFyZS5pc0hpdCkge1xuICAgICAgICBpZiAoc3F1YXJlLnNoaXApIHtcbiAgICAgICAgICAvLyBpZiBoaXQgYSBzaGlwLCBtYXJrIGFzIGhpdCBhbmQgc2V0IGhhc0hpdFNoaXAgdG8gdHJ1ZVxuICAgICAgICAgIGdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKHgsIHkpO1xuICAgICAgICAgIHRoaXMuaGFzSGl0U2hpcCA9IHRydWU7XG4gICAgICAgICAgdGhpcy5sYXN0SGl0ID0gW3gsIHldO1xuICAgICAgICAgIHRoaXMuYWRqYWNlbnRTcXVhcmVzID0gW1xuICAgICAgICAgICAgWy0xLCAwXSxcbiAgICAgICAgICAgIFswLCAtMV0sXG4gICAgICAgICAgICBbMSwgMF0sXG4gICAgICAgICAgICBbMCwgMV0sXG4gICAgICAgICAgXTsgLy8gcmVzZXQgdGhlIGFkamFjZW50IHNxdWFyZXNcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBpZiBtaXNzLCBtYXJrIGFzIG1pc3MgYW5kIHNldCBoYXNIaXRTaGlwIHRvIGZhbHNlXG4gICAgICAgICAgZ2FtZWJvYXJkLnJlY2VpdmVBdHRhY2soeCwgeSk7XG4gICAgICAgICAgdGhpcy5oYXNIaXRTaGlwID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgYXR0YWNrQ29tcGxldGVkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5oYXNIaXRTaGlwICYmIHRoaXMuYWRqYWNlbnRTcXVhcmVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAvLyBpZiBubyBtb3JlIGFkamFjZW50IHNxdWFyZXMgdG8gdGFyZ2V0LCByZXNldCBoYXNIaXRTaGlwIGFuZCBhZGphY2VudFNxdWFyZXNcbiAgICAgICAgdGhpcy5oYXNIaXRTaGlwID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYWRqYWNlbnRTcXVhcmVzID0gW1xuICAgICAgICAgIFstMSwgMF0sXG4gICAgICAgICAgWzAsIC0xXSxcbiAgICAgICAgICBbMSwgMF0sXG4gICAgICAgICAgWzAsIDFdLFxuICAgICAgICBdO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbn07XG5cbmxldCBjdXJyZW50UGxheWVyID0gcGxheWVyO1xuXG5mdW5jdGlvbiBzd2l0Y2hUdXJucygpIHtcbiAgaWYgKGN1cnJlbnRQbGF5ZXIgPT09IHBsYXllcikge1xuICAgIGN1cnJlbnRQbGF5ZXIgPSBjb21wdXRlcjtcbiAgfSBlbHNlIHtcbiAgICBjdXJyZW50UGxheWVyID0gcGxheWVyO1xuICB9XG59XG5cbmNvbnN0IHBsYXllckJvYXJkRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGxheWVyLWJvYXJkXCIpO1xuY29uc3QgY29tcHV0ZXJCb2FyZEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbXB1dGVyLWJvYXJkXCIpO1xuXG5mdW5jdGlvbiByZW5kZXJCb2FyZChib2FyZCwgZWxlbWVudCkge1xuICAvLyBDbGVhciB0aGUgYm9hcmQgYmVmb3JlIHJlbmRlcmluZ1xuICBlbGVtZW50LmlubmVySFRNTCA9IFwiXCI7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBib2FyZC5ib2FyZC5sZW5ndGg7IGkrKykge1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgYm9hcmQuYm9hcmRbaV0ubGVuZ3RoOyBqKyspIHtcbiAgICAgIGNvbnN0IHNxdWFyZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBzcXVhcmUuY2xhc3NMaXN0LmFkZChcInNxdWFyZVwiKTtcblxuICAgICAgaWYgKGJvYXJkLmJvYXJkW2ldW2pdLnNoaXAgPT09IG51bGwgJiYgYm9hcmQuYm9hcmRbaV1bal0uaXNIaXQgPT09IHRydWUpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJ5b1wiICsgYm9hcmQuYm9hcmRbaV1bal0uc2hpcCk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiaXMgaGl0XCIgKyBib2FyZC5ib2FyZFtpXVtqXS5pc0hpdCk7XG4gICAgICAgIHNxdWFyZS5jbGFzc0xpc3QuYWRkKFwibWlzc1wiKTtcbiAgICAgICAgc3F1YXJlLnRleHRDb250ZW50ID0gXCJtaXNzXCI7XG4gICAgICB9XG4gICAgICBpZiAoYm9hcmQuYm9hcmRbaV1bal0uc2hpcCAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoYm9hcmQuYm9hcmRbaV1bal0uaXNIaXQgPT09IHRydWUpIHtcbiAgICAgICAgICBzcXVhcmUuY2xhc3NMaXN0LmFkZChcImhpdFwiKTtcbiAgICAgICAgICBzcXVhcmUudGV4dENvbnRlbnQgPSBcImhpdFwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNxdWFyZS5jbGFzc0xpc3QuYWRkKFwic2hpcFwiKTtcbiAgICAgICAgICBzcXVhcmUudGV4dENvbnRlbnQgPSBcInNoaXBcIjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzcXVhcmUuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgaWYgKGN1cnJlbnRQbGF5ZXIgPT09IHBsYXllciAmJiAhYm9hcmQuYm9hcmRbaV1bal0uaXNIaXQpIHtcbiAgICAgICAgICBjdXJyZW50UGxheWVyLmF0dGFjayhjb21wdXRlckJvYXJkLCBqLCBpKTtcbiAgICAgICAgICByZW5kZXJCb2FyZChjb21wdXRlckJvYXJkLCBjb21wdXRlckJvYXJkRWxlbWVudCk7XG4gICAgICAgICAgc3dpdGNoVHVybnMoKTtcbiAgICAgICAgICBwbGF5R2FtZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoc3F1YXJlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcGxheUdhbWUoKSB7XG4gIGlmIChwbGF5ZXJCb2FyZC5hcmVBbGxTaGlwc1N1bmsoKSkge1xuICAgIGFsZXJ0KFwiQ29tcHV0ZXIgd2lucyFcIik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGNvbXB1dGVyQm9hcmQuYXJlQWxsU2hpcHNTdW5rKCkpIHtcbiAgICBhbGVydChcIlBsYXllciB3aW5zIVwiKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoY3VycmVudFBsYXllciA9PT0gY29tcHV0ZXIpIHtcbiAgICBjb25zb2xlLmxvZyhwbGF5ZXJCb2FyZC5ib2FyZCk7XG4gICAgY3VycmVudFBsYXllci5hdHRhY2socGxheWVyQm9hcmQpO1xuICAgIHJlbmRlckJvYXJkKHBsYXllckJvYXJkLCBwbGF5ZXJCb2FyZEVsZW1lbnQpO1xuICAgIHN3aXRjaFR1cm5zKCk7XG4gICAgcGxheUdhbWUoKTtcbiAgfVxufVxuXG5yZW5kZXJCb2FyZChwbGF5ZXJCb2FyZCwgcGxheWVyQm9hcmRFbGVtZW50KTtcbnJlbmRlckJvYXJkKGNvbXB1dGVyQm9hcmQsIGNvbXB1dGVyQm9hcmRFbGVtZW50KTtcbnBsYXlHYW1lKCk7XG5cbi8vIFJlc3RhcnQgZ2FtZSBmdW5jdGlvblxuZnVuY3Rpb24gcmVzdGFydEdhbWUoKSB7XG5cbiAgLy9wbGF5ZXJCb2FyZC5zaGlwcyA9IFtdO1xuICAvL2NvbXB1dGVyQm9hcmQuc2hpcHMgPSBbXTtcblxuICBwbGF5ZXJCb2FyZCA9IGdhbWVib2FyZCgpO1xuICBjb21wdXRlckJvYXJkID0gZ2FtZWJvYXJkKCk7XG4gIHBsYWNlUmFuZG9tU2hpcHMocGxheWVyQm9hcmQpO1xuICBwbGFjZVJhbmRvbVNoaXBzKGNvbXB1dGVyQm9hcmQpO1xuXG4gIHJlbmRlckJvYXJkKHBsYXllckJvYXJkLCBwbGF5ZXJCb2FyZEVsZW1lbnQpO1xucmVuZGVyQm9hcmQoY29tcHV0ZXJCb2FyZCwgY29tcHV0ZXJCb2FyZEVsZW1lbnQpO1xucGxheUdhbWUoKTtcbn1cblxuY29uc3QgcmVzdGFydEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXN0YXJ0LWJ0bicpO1xucmVzdGFydEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgLy8gQ29kZSB0byByZS1pbml0aWFsaXplIHRoZSBnYW1lXG5cbiAgY29uc29sZS5sb2coJ2NsaWNrZWQnKTtcblxuICByZXN0YXJ0R2FtZSgpO1xufSk7XG5cblxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIl0sIm5hbWVzIjpbIl9fd2VicGFja19yZXF1aXJlX18iLCJzaGlwIiwibGVuZ3RoIiwiX2hpdHMiLCJpc1N1bmsiLCJoaXRzIiwiaGl0IiwiZ2FtZWJvYXJkIiwiYm9hcmQiLCJBcnJheSIsImZyb20iLCJmaWxsIiwibWFwIiwiaXNIaXQiLCJzaGlwcyIsInBsYWNlU2hpcCIsIngiLCJ5IiwiaXNWZXJ0aWNhbCIsIkVycm9yIiwiaSIsInB1c2giLCJyZWNlaXZlQXR0YWNrIiwic3F1YXJlIiwiYXJlQWxsU2hpcHNTdW5rIiwiZXZlcnkiLCJkIiwiZXhwb3J0cyIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImNvbnNvbGUiLCJsb2ciLCJzcGxpdCIsInJldmVyc2UiLCJqb2luIiwicGxheWVyQm9hcmQiLCJjb21wdXRlckJvYXJkIiwicGxhY2VSYW5kb21TaGlwcyIsInNoaXBMZW5ndGhzIiwic2hpcFBsYWNlZCIsImlzSG9yaXpvbnRhbCIsIk1hdGgiLCJyYW5kb20iLCJyb3ciLCJmbG9vciIsImNvbCIsImVycm9yIiwicGxheWVyIiwiYXR0YWNrIiwiY29tcHV0ZXIiLCJoYXNIaXRTaGlwIiwibGFzdEhpdCIsImFkamFjZW50U3F1YXJlcyIsImF0dGFja0NvbXBsZXRlZCIsInRoaXMiLCJsYXN0SGl0WCIsImxhc3RIaXRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJzaGlmdCIsImN1cnJlbnRQbGF5ZXIiLCJzd2l0Y2hUdXJucyIsInBsYXllckJvYXJkRWxlbWVudCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJjb21wdXRlckJvYXJkRWxlbWVudCIsInJlbmRlckJvYXJkIiwiZWxlbWVudCIsImlubmVySFRNTCIsImoiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwidGV4dENvbnRlbnQiLCJhZGRFdmVudExpc3RlbmVyIiwicGxheUdhbWUiLCJhcHBlbmRDaGlsZCIsImFsZXJ0Il0sInNvdXJjZVJvb3QiOiIifQ==