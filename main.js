(()=>{"use strict";var t={};function e(t){let e=0,i=!1;return{length:t,get hits(){return e},get isSunk(){return i},hit:function(){e++,e===t&&(i=!0)}}}function i(){const t=Array.from(Array(10),(()=>Array(10).fill().map((()=>({isHit:!1,ship:null}))))),e=[];return{board:t,placeShip:function(i,r,n,o){if(r<0||r>=10||n<0||n>=10)throw new Error("Invalid coordinates");if(o){if(n+i.length>10)throw new Error("Ship placement out of bounds");for(let e=0;e<i.length;e++)if(null!==t[n+e][r].ship)throw new Error("Ship placement overlap");for(let e=0;e<i.length;e++)t[n+e][r]={ship:i,isHit:!1}}else{if(r+i.length>10)throw new Error("Ship placement out of bounds");for(let e=0;e<i.length;e++)if(null!==t[n][r+e].ship)throw new Error("Ship placement overlap");for(let e=0;e<i.length;e++)t[n][r+e]={ship:i,isHit:!1}}e.push(i)},receiveAttack:function(e,i){if(e<0||e>=10||i<0||i>=10)throw new Error("Invalid coordinates");const r=t[i][e];return null!==r.ship&&0==r.isHit?(r.isHit=!0,r.ship.hit(),!0):!(!r||0!=r.isHit||(r.isHit=!0,0))},areAllShipsSunk:function(){return e.every((t=>t.isSunk))}}}t.d=(e,i)=>{for(var r in i)t.o(i,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:i[r]})},t.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),console.log("mazda".split("").reverse().join(""));let r=i(),n=i();function o(t){const i=[5,4,3,3,2];for(let r of i){let i=!1;for(;!i;)try{const n=Math.random()>=.5,o=Math.floor(9*Math.random()),a=Math.floor(9*Math.random());t.placeShip(e(r),o,a,n),i=!0}catch(t){console.error(t)}}}o(r),o(n);const a={attack(t,e,i){t.receiveAttack(e,i)}},s={hasHitShip:!1,lastHit:null,adjacentSquares:[[-1,0],[0,-1],[1,0],[0,1]],attack(t){let e=!1;for(;!e;){let i,r;if(this.hasHitShip){const[t,e]=this.lastHit,[n,o]=this.adjacentSquares.shift();i=t+n,r=e+o}else i=Math.floor(10*Math.random()),r=Math.floor(10*Math.random());if(i>=0&&i<10&&r>=0&&r<10){const n=t.board[r][i];console.log(n),n&&!n.isHit?(n.ship?(t.receiveAttack(i,r),this.hasHitShip=!0,this.lastHit=[i,r],this.adjacentSquares=[[-1,0],[0,-1],[1,0],[0,1]]):(t.receiveAttack(i,r),this.hasHitShip=!1),e=!0):this.hasHitShip&&0===this.adjacentSquares.length&&(this.hasHitShip=!1,this.adjacentSquares=[[-1,0],[0,-1],[1,0],[0,1]])}else this.hasHitShip=!1}}};let l=a;function h(){l=l===a?s:a}const c=document.getElementById("player-board"),d=document.getElementById("computer-board");function p(t,e){e.innerHTML="";for(let i=0;i<t.board.length;i++)for(let r=0;r<t.board[i].length;r++){const o=document.createElement("div");o.classList.add("square"),null===t.board[i][r].ship&&!0===t.board[i][r].isHit&&(console.log("yo"+t.board[i][r].ship),console.log("is hit"+t.board[i][r].isHit),o.classList.add("miss"),o.textContent="â€¢"),null!==t.board[i][r].ship&&(!0===t.board[i][r].isHit?(o.classList.add("ship"),o.classList.add("hit"),o.textContent=""):o.classList.add("ship")),o.addEventListener("click",(()=>{l!==a||t.board[i][r].isHit||o.parentElement!==d||(l.attack(n,r,i),p(n,d),h(),u())})),e.appendChild(o)}}function u(){r.areAllShipsSunk()?alert("Computer wins!"):n.areAllShipsSunk()?alert("Player wins!"):l===s&&(console.log(r.board),l.attack(r),p(r,c),h(),u())}p(r,c),p(n,d),u(),document.getElementById("restart-btn").addEventListener("click",(()=>{r=i(),n=i(),o(r),o(n),p(r,c),p(n,d),u()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEdBQUdsRSxPQUN6Q1UsRUFBTzBELFVBQVVDLElBQUksUUFDckIzRCxFQUFPNEQsWUFBYyxLQUVRLE9BQTNCM0UsRUFBTUEsTUFBTVksR0FBRzJELEdBQUc5RSxRQUNZLElBQTVCTyxFQUFNQSxNQUFNWSxHQUFHMkQsR0FBR2xFLE9BQ3BCVSxFQUFPMEQsVUFBVUMsSUFBSSxRQUNyQjNELEVBQU8wRCxVQUFVQyxJQUFJLE9BQ3JCM0QsRUFBTzRELFlBQWMsSUFFckI1RCxFQUFPMEQsVUFBVUMsSUFBSSxTQUl6QjNELEVBQU82RCxpQkFBaUIsU0FBUyxLQUU3QmQsSUFBa0JiLEdBQ2pCakQsRUFBTUEsTUFBTVksR0FBRzJELEdBQUdsRSxPQUNuQlUsRUFBTzhELGdCQUFrQlYsSUFFekJMLEVBQWNaLE9BQU9aLEVBQWVpQyxFQUFHM0QsR0FDdkN3RCxFQUFZOUIsRUFBZTZCLEdBQzNCSixJQUNBZSxJQUNGLElBRUZULEVBQVFVLFlBQVloRSxFQUN0QixDQUVKLENBRUEsU0FBUytELElBQ0h6QyxFQUFZckIsa0JBQ2RnRSxNQUFNLGtCQUlKMUMsRUFBY3RCLGtCQUNoQmdFLE1BQU0sZ0JBSUpsQixJQUFrQlgsSUFDcEJuQixRQUFRQyxJQUFJSSxFQUFZckMsT0FDeEI4RCxFQUFjWixPQUFPYixHQUNyQitCLEVBQVkvQixFQUFhMkIsR0FDekJELElBQ0FlLElBRUosQ0FFQVYsRUFBWS9CLEVBQWEyQixHQUN6QkksRUFBWTlCLEVBQWU2QixHQUMzQlcsSUFlbUJiLFNBQVNDLGVBQWUsZUFDaENVLGlCQUFpQixTQUFTLEtBWm5DdkMsRUFBY3RDLElBQ2R1QyxFQUFnQnZDLElBRWhCd0MsRUFBaUJGLEdBQ2pCRSxFQUFpQkQsR0FFakI4QixFQUFZL0IsRUFBYTJCLEdBQ3pCSSxFQUFZOUIsRUFBZTZCLEdBQzNCVyxHQUthLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSByZXF1aXJlIHNjb3BlXG52YXIgX193ZWJwYWNrX3JlcXVpcmVfXyA9IHt9O1xuXG4iLCJmdW5jdGlvbiByZXZlcnNlU3RyaW5nKHN0cikge1xuICByZXR1cm4gc3RyLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpO1xufVxuXG5jb25zb2xlLmxvZyhyZXZlcnNlU3RyaW5nKFwibWF6ZGFcIikpO1xuXG4vL1NISVAgRkFDVE9SWVxuXG5mdW5jdGlvbiBzaGlwKGxlbmd0aCkge1xuICBsZXQgX2hpdHMgPSAwO1xuICBsZXQgaXNTdW5rID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gaGl0KCkge1xuICAgIF9oaXRzKys7XG4gICAgaWYgKF9oaXRzID09PSBsZW5ndGgpIHtcbiAgICAgIGlzU3VuayA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBsZW5ndGgsXG4gICAgZ2V0IGhpdHMoKSB7XG4gICAgICByZXR1cm4gX2hpdHM7XG4gICAgfSxcbiAgICBnZXQgaXNTdW5rKCkge1xuICAgICAgcmV0dXJuIGlzU3VuaztcbiAgICB9LFxuICAgIGhpdCxcbiAgfTtcbn1cblxuLy9HQU1FQk9BUkQgRkFDVE9SWVxuXG5mdW5jdGlvbiBnYW1lYm9hcmQoKSB7XG4gIGNvbnN0IGJvYXJkID0gQXJyYXkuZnJvbShBcnJheSgxMCksICgpID0+XG4gICAgQXJyYXkoMTApXG4gICAgICAuZmlsbCgpXG4gICAgICAubWFwKCgpID0+ICh7XG4gICAgICAgIGlzSGl0OiBmYWxzZSxcbiAgICAgICAgc2hpcDogbnVsbCxcbiAgICAgIH0pKVxuICApO1xuXG4gIGNvbnN0IHNoaXBzID0gW107XG5cbiAgZnVuY3Rpb24gcGxhY2VTaGlwKHNoaXAsIHgsIHksIGlzVmVydGljYWwpIHtcbiAgICBpZiAoeCA8IDAgfHwgeCA+PSAxMCB8fCB5IDwgMCB8fCB5ID49IDEwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNvb3JkaW5hdGVzXCIpO1xuICAgIH1cblxuICAgIGlmIChpc1ZlcnRpY2FsKSB7XG4gICAgICBpZiAoeSArIHNoaXAubGVuZ3RoID4gMTApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2hpcCBwbGFjZW1lbnQgb3V0IG9mIGJvdW5kc1wiKTtcbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChib2FyZFt5ICsgaV1beF0uc2hpcCAhPT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNoaXAgcGxhY2VtZW50IG92ZXJsYXBcIik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGJvYXJkW3kgKyBpXVt4XSA9IHsgc2hpcDogc2hpcCwgaXNIaXQ6IGZhbHNlIH07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh4ICsgc2hpcC5sZW5ndGggPiAxMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTaGlwIHBsYWNlbWVudCBvdXQgb2YgYm91bmRzXCIpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGJvYXJkW3ldW3ggKyBpXS5zaGlwICE9PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2hpcCBwbGFjZW1lbnQgb3ZlcmxhcFwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYm9hcmRbeV1beCArIGldID0geyBzaGlwOiBzaGlwLCBpc0hpdDogZmFsc2UgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzaGlwcy5wdXNoKHNoaXApO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVjZWl2ZUF0dGFjayh4LCB5KSB7XG4gICAgaWYgKHggPCAwIHx8IHggPj0gMTAgfHwgeSA8IDAgfHwgeSA+PSAxMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjb29yZGluYXRlc1wiKTtcbiAgICB9XG5cbiAgICBjb25zdCBzcXVhcmUgPSBib2FyZFt5XVt4XTtcbiAgICBpZiAoc3F1YXJlLnNoaXAgIT09IG51bGwgJiYgc3F1YXJlLmlzSGl0ID09IGZhbHNlKSB7XG4gICAgICBzcXVhcmUuaXNIaXQgPSB0cnVlO1xuICAgICAgc3F1YXJlLnNoaXAuaGl0KCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHNxdWFyZSAmJiBzcXVhcmUuaXNIaXQgPT0gZmFsc2UpIHtcbiAgICAgIHNxdWFyZS5pc0hpdCA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFyZUFsbFNoaXBzU3VuaygpIHtcbiAgICByZXR1cm4gc2hpcHMuZXZlcnkoKHNoaXApID0+IHNoaXAuaXNTdW5rKTtcbiAgfVxuXG4gIHJldHVybiB7IGJvYXJkLCBwbGFjZVNoaXAsIHJlY2VpdmVBdHRhY2ssIGFyZUFsbFNoaXBzU3VuayB9O1xufVxuXG5leHBvcnQgeyByZXZlcnNlU3RyaW5nLCBzaGlwLCBnYW1lYm9hcmQgfTtcblxuLy9NQUlOIEdBTUUgTE9PUFxuXG5sZXQgcGxheWVyQm9hcmQgPSBnYW1lYm9hcmQoKTtcbmxldCBjb21wdXRlckJvYXJkID0gZ2FtZWJvYXJkKCk7XG5cbmZ1bmN0aW9uIHBsYWNlUmFuZG9tU2hpcHMoYm9hcmQpIHtcbiAgY29uc3Qgc2hpcExlbmd0aHMgPSBbNSwgNCwgMywgMywgMl07XG5cbiAgZm9yIChsZXQgbGVuZ3RoIG9mIHNoaXBMZW5ndGhzKSB7XG4gICAgbGV0IHNoaXBQbGFjZWQgPSBmYWxzZTtcblxuICAgIHdoaWxlICghc2hpcFBsYWNlZCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgaXNIb3Jpem9udGFsID0gTWF0aC5yYW5kb20oKSA+PSAwLjU7XG4gICAgICAgIGNvbnN0IHJvdyA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDkpO1xuICAgICAgICBjb25zdCBjb2wgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA5KTtcblxuICAgICAgICBib2FyZC5wbGFjZVNoaXAoc2hpcChsZW5ndGgpLCByb3csIGNvbCwgaXNIb3Jpem9udGFsKTtcbiAgICAgICAgc2hpcFBsYWNlZCA9IHRydWU7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxucGxhY2VSYW5kb21TaGlwcyhwbGF5ZXJCb2FyZCk7XG5wbGFjZVJhbmRvbVNoaXBzKGNvbXB1dGVyQm9hcmQpO1xuXG5jb25zdCBwbGF5ZXIgPSB7XG4gIGF0dGFjayhnYW1lYm9hcmQsIHgsIHkpIHtcbiAgICBnYW1lYm9hcmQucmVjZWl2ZUF0dGFjayh4LCB5KTtcbiAgfSxcbn07XG5cbmNvbnN0IGNvbXB1dGVyID0ge1xuICBoYXNIaXRTaGlwOiBmYWxzZSxcbiAgbGFzdEhpdDogbnVsbCwgLy8gW3gsIHldIGNvb3JkaW5hdGVzIG9mIHRoZSBsYXN0IGhpdFxuICBhZGphY2VudFNxdWFyZXM6IFtcbiAgICBbLTEsIDBdLFxuICAgIFswLCAtMV0sXG4gICAgWzEsIDBdLFxuICAgIFswLCAxXSxcbiAgXSwgLy8gYWRqYWNlbnQgc3F1YXJlcyB0byB0YXJnZXRcblxuICBhdHRhY2soZ2FtZWJvYXJkKSB7XG4gICAgbGV0IGF0dGFja0NvbXBsZXRlZCA9IGZhbHNlO1xuICAgIHdoaWxlICghYXR0YWNrQ29tcGxldGVkKSB7XG4gICAgICBsZXQgeCwgeTtcbiAgICAgIGlmICh0aGlzLmhhc0hpdFNoaXApIHtcbiAgICAgICAgLy8gdGFyZ2V0IGFuIGFkamFjZW50IHNxdWFyZSB0byB0aGUgbGFzdCBoaXRcbiAgICAgICAgY29uc3QgW2xhc3RIaXRYLCBsYXN0SGl0WV0gPSB0aGlzLmxhc3RIaXQ7XG4gICAgICAgIGNvbnN0IFtvZmZzZXRYLCBvZmZzZXRZXSA9IHRoaXMuYWRqYWNlbnRTcXVhcmVzLnNoaWZ0KCk7IC8vIHJlbW92ZSBhbmQgdXNlIHRoZSBmaXJzdCBhZGphY2VudCBzcXVhcmVcbiAgICAgICAgeCA9IGxhc3RIaXRYICsgb2Zmc2V0WDtcbiAgICAgICAgeSA9IGxhc3RIaXRZICsgb2Zmc2V0WTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGNob29zZSBhIHJhbmRvbSBzcXVhcmVcbiAgICAgICAgeCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKTtcbiAgICAgICAgeSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHggPj0gMCAmJiB4IDwgMTAgJiYgeSA+PSAwICYmIHkgPCAxMCkge1xuICAgICAgICAvL2NoZWNrIHRvIGVuc3VyZSB0aGF0IHRoZSB4IGFuZCB5IHZhbHVlcyBhcmUgd2l0aGluIHRoZSBib3VuZHMgb2YgdGhlIGdhbWVib2FyZCBiZWZvcmUgYWNjZXNzaW5nIHRoZSBib2FyZCBhcnJheVxuICAgICAgICBjb25zdCBzcXVhcmUgPSBnYW1lYm9hcmQuYm9hcmRbeV1beF07XG4gICAgICAgIGNvbnNvbGUubG9nKHNxdWFyZSk7XG4gICAgICAgIGlmIChzcXVhcmUgJiYgIXNxdWFyZS5pc0hpdCkge1xuICAgICAgICAgIGlmIChzcXVhcmUuc2hpcCkge1xuICAgICAgICAgICAgLy8gaWYgaGl0IGEgc2hpcCwgbWFyayBhcyBoaXQgYW5kIHNldCBoYXNIaXRTaGlwIHRvIHRydWVcbiAgICAgICAgICAgIGdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKHgsIHkpO1xuICAgICAgICAgICAgdGhpcy5oYXNIaXRTaGlwID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMubGFzdEhpdCA9IFt4LCB5XTtcbiAgICAgICAgICAgIHRoaXMuYWRqYWNlbnRTcXVhcmVzID0gW1xuICAgICAgICAgICAgICBbLTEsIDBdLFxuICAgICAgICAgICAgICBbMCwgLTFdLFxuICAgICAgICAgICAgICBbMSwgMF0sXG4gICAgICAgICAgICAgIFswLCAxXSxcbiAgICAgICAgICAgIF07IC8vIHJlc2V0IHRoZSBhZGphY2VudCBzcXVhcmVzXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGlmIG1pc3MsIG1hcmsgYXMgbWlzcyBhbmQgc2V0IGhhc0hpdFNoaXAgdG8gZmFsc2VcbiAgICAgICAgICAgIGdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKHgsIHkpO1xuICAgICAgICAgICAgdGhpcy5oYXNIaXRTaGlwID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIGF0dGFja0NvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5oYXNIaXRTaGlwICYmIHRoaXMuYWRqYWNlbnRTcXVhcmVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIC8vIGlmIG5vIG1vcmUgYWRqYWNlbnQgc3F1YXJlcyB0byB0YXJnZXQsIHJlc2V0IGhhc0hpdFNoaXAgYW5kIGFkamFjZW50U3F1YXJlc1xuICAgICAgICAgIHRoaXMuaGFzSGl0U2hpcCA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMuYWRqYWNlbnRTcXVhcmVzID0gW1xuICAgICAgICAgICAgWy0xLCAwXSxcbiAgICAgICAgICAgIFswLCAtMV0sXG4gICAgICAgICAgICBbMSwgMF0sXG4gICAgICAgICAgICBbMCwgMV0sXG4gICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5oYXNIaXRTaGlwID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9LFxufTtcblxubGV0IGN1cnJlbnRQbGF5ZXIgPSBwbGF5ZXI7XG5cbmZ1bmN0aW9uIHN3aXRjaFR1cm5zKCkge1xuICBpZiAoY3VycmVudFBsYXllciA9PT0gcGxheWVyKSB7XG4gICAgY3VycmVudFBsYXllciA9IGNvbXB1dGVyO1xuICB9IGVsc2Uge1xuICAgIGN1cnJlbnRQbGF5ZXIgPSBwbGF5ZXI7XG4gIH1cbn1cblxuY29uc3QgcGxheWVyQm9hcmRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwbGF5ZXItYm9hcmRcIik7XG5jb25zdCBjb21wdXRlckJvYXJkRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29tcHV0ZXItYm9hcmRcIik7XG5cbmZ1bmN0aW9uIHJlbmRlckJvYXJkKGJvYXJkLCBlbGVtZW50KSB7XG4gIC8vIENsZWFyIHRoZSBib2FyZCBiZWZvcmUgcmVuZGVyaW5nXG4gIGVsZW1lbnQuaW5uZXJIVE1MID0gXCJcIjtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGJvYXJkLmJvYXJkLmxlbmd0aDsgaSsrKSB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBib2FyZC5ib2FyZFtpXS5sZW5ndGg7IGorKykge1xuICAgICAgY29uc3Qgc3F1YXJlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIHNxdWFyZS5jbGFzc0xpc3QuYWRkKFwic3F1YXJlXCIpO1xuXG4gICAgICBpZiAoYm9hcmQuYm9hcmRbaV1bal0uc2hpcCA9PT0gbnVsbCAmJiBib2FyZC5ib2FyZFtpXVtqXS5pc0hpdCA9PT0gdHJ1ZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcInlvXCIgKyBib2FyZC5ib2FyZFtpXVtqXS5zaGlwKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJpcyBoaXRcIiArIGJvYXJkLmJvYXJkW2ldW2pdLmlzSGl0KTtcbiAgICAgICAgc3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJtaXNzXCIpO1xuICAgICAgICBzcXVhcmUudGV4dENvbnRlbnQgPSBcIuKAolwiO1xuICAgICAgfVxuICAgICAgaWYgKGJvYXJkLmJvYXJkW2ldW2pdLnNoaXAgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKGJvYXJkLmJvYXJkW2ldW2pdLmlzSGl0ID09PSB0cnVlKSB7XG4gICAgICAgICAgc3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJzaGlwXCIpO1xuICAgICAgICAgIHNxdWFyZS5jbGFzc0xpc3QuYWRkKFwiaGl0XCIpO1xuICAgICAgICAgIHNxdWFyZS50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJzaGlwXCIpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHNxdWFyZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgY3VycmVudFBsYXllciA9PT0gcGxheWVyICYmXG4gICAgICAgICAgIWJvYXJkLmJvYXJkW2ldW2pdLmlzSGl0ICYmXG4gICAgICAgICAgc3F1YXJlLnBhcmVudEVsZW1lbnQgPT09IGNvbXB1dGVyQm9hcmRFbGVtZW50XG4gICAgICAgICkge1xuICAgICAgICAgIGN1cnJlbnRQbGF5ZXIuYXR0YWNrKGNvbXB1dGVyQm9hcmQsIGosIGkpO1xuICAgICAgICAgIHJlbmRlckJvYXJkKGNvbXB1dGVyQm9hcmQsIGNvbXB1dGVyQm9hcmRFbGVtZW50KTtcbiAgICAgICAgICBzd2l0Y2hUdXJucygpO1xuICAgICAgICAgIHBsYXlHYW1lKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChzcXVhcmUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwbGF5R2FtZSgpIHtcbiAgaWYgKHBsYXllckJvYXJkLmFyZUFsbFNoaXBzU3VuaygpKSB7XG4gICAgYWxlcnQoXCJDb21wdXRlciB3aW5zIVwiKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoY29tcHV0ZXJCb2FyZC5hcmVBbGxTaGlwc1N1bmsoKSkge1xuICAgIGFsZXJ0KFwiUGxheWVyIHdpbnMhXCIpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChjdXJyZW50UGxheWVyID09PSBjb21wdXRlcikge1xuICAgIGNvbnNvbGUubG9nKHBsYXllckJvYXJkLmJvYXJkKTtcbiAgICBjdXJyZW50UGxheWVyLmF0dGFjayhwbGF5ZXJCb2FyZCk7XG4gICAgcmVuZGVyQm9hcmQocGxheWVyQm9hcmQsIHBsYXllckJvYXJkRWxlbWVudCk7XG4gICAgc3dpdGNoVHVybnMoKTtcbiAgICBwbGF5R2FtZSgpO1xuICB9XG59XG5cbnJlbmRlckJvYXJkKHBsYXllckJvYXJkLCBwbGF5ZXJCb2FyZEVsZW1lbnQpO1xucmVuZGVyQm9hcmQoY29tcHV0ZXJCb2FyZCwgY29tcHV0ZXJCb2FyZEVsZW1lbnQpO1xucGxheUdhbWUoKTtcblxuLy8gUmVzdGFydCBnYW1lIGZ1bmN0aW9uXG5mdW5jdGlvbiByZXN0YXJ0R2FtZSgpIHtcbiAgcGxheWVyQm9hcmQgPSBnYW1lYm9hcmQoKTtcbiAgY29tcHV0ZXJCb2FyZCA9IGdhbWVib2FyZCgpO1xuXG4gIHBsYWNlUmFuZG9tU2hpcHMocGxheWVyQm9hcmQpO1xuICBwbGFjZVJhbmRvbVNoaXBzKGNvbXB1dGVyQm9hcmQpO1xuXG4gIHJlbmRlckJvYXJkKHBsYXllckJvYXJkLCBwbGF5ZXJCb2FyZEVsZW1lbnQpO1xuICByZW5kZXJCb2FyZChjb21wdXRlckJvYXJkLCBjb21wdXRlckJvYXJkRWxlbWVudCk7XG4gIHBsYXlHYW1lKCk7XG59XG4vL1Jlc3RhcnQgR2FtZSBidXR0b25cbmNvbnN0IHJlc3RhcnRCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlc3RhcnQtYnRuXCIpO1xucmVzdGFydEJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICByZXN0YXJ0R2FtZSgpO1xufSk7XG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIl0sIm5hbWVzIjpbIl9fd2VicGFja19yZXF1aXJlX18iLCJzaGlwIiwibGVuZ3RoIiwiX2hpdHMiLCJpc1N1bmsiLCJoaXRzIiwiaGl0IiwiZ2FtZWJvYXJkIiwiYm9hcmQiLCJBcnJheSIsImZyb20iLCJmaWxsIiwibWFwIiwiaXNIaXQiLCJzaGlwcyIsInBsYWNlU2hpcCIsIngiLCJ5IiwiaXNWZXJ0aWNhbCIsIkVycm9yIiwiaSIsInB1c2giLCJyZWNlaXZlQXR0YWNrIiwic3F1YXJlIiwiYXJlQWxsU2hpcHNTdW5rIiwiZXZlcnkiLCJkIiwiZXhwb3J0cyIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImNvbnNvbGUiLCJsb2ciLCJzcGxpdCIsInJldmVyc2UiLCJqb2luIiwicGxheWVyQm9hcmQiLCJjb21wdXRlckJvYXJkIiwicGxhY2VSYW5kb21TaGlwcyIsInNoaXBMZW5ndGhzIiwic2hpcFBsYWNlZCIsImlzSG9yaXpvbnRhbCIsIk1hdGgiLCJyYW5kb20iLCJyb3ciLCJmbG9vciIsImNvbCIsImVycm9yIiwicGxheWVyIiwiYXR0YWNrIiwiY29tcHV0ZXIiLCJoYXNIaXRTaGlwIiwibGFzdEhpdCIsImFkamFjZW50U3F1YXJlcyIsImF0dGFja0NvbXBsZXRlZCIsInRoaXMiLCJsYXN0SGl0WCIsImxhc3RIaXRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJzaGlmdCIsImN1cnJlbnRQbGF5ZXIiLCJzd2l0Y2hUdXJucyIsInBsYXllckJvYXJkRWxlbWVudCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJjb21wdXRlckJvYXJkRWxlbWVudCIsInJlbmRlckJvYXJkIiwiZWxlbWVudCIsImlubmVySFRNTCIsImoiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwidGV4dENvbnRlbnQiLCJhZGRFdmVudExpc3RlbmVyIiwicGFyZW50RWxlbWVudCIsInBsYXlHYW1lIiwiYXBwZW5kQ2hpbGQiLCJhbGVydCJdLCJzb3VyY2VSb290IjoiIn0=